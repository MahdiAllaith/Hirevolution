//
//  s.swift
//  Hirevolution
//
//  Created by Mac 14 on 18/11/2024.
//

import UIKit

class RegistrationController: UIViewController {
    // the background image behinde both views
    @IBOutlet weak var BackgroundImage: UIImageView!
    
    //Sub main views
    @IBOutlet weak var SignInView: UIView!
    @IBOutlet weak var LogInView: UIView!
    //close button
    @IBOutlet weak var ColseButton: UIButton!
    //close button action
    @IBAction func CloseRegIsClicked(_ sender: Any) {
        self.dismiss(animated: true)
    }
    
    
    //log in view stuff
    @IBOutlet weak var EmailTF: UITextField!
    @IBOutlet weak var PasswordTf: UITextField!
    @IBOutlet weak var LogInButton: UIButton!
    //log in action stuff
    @IBAction func LogInButtonIsClicked(_ sender: Any) {
        
    }
    @IBAction func ChangeToRegClicked(_ sender: Any) {
        UIView.animate(withDuration: 0.5, animations: {
            self.LogInView.transform = CGAffineTransform(translationX: 0, y: self.LogInView.bounds.height)
            self.LogInView.alpha = 0
        }) { _ in
            
            self.LogInView.isHidden = true
            self.SignInView.isHidden = false
            self.SignInView.transform = CGAffineTransform(translationX: 0, y: self.SignInView.bounds.height)
            UIView.animate(withDuration: 0.5){
                self.SignInView.transform = .identity
                self.SignInView.alpha = 1
            }
        }
        
    }
    
    // sign up view stuff
    @IBOutlet weak var RegEmailTF: UITextField!
    @IBOutlet weak var RegPasswordTF: UITextField!
    @IBOutlet weak var RegCheckPassTF: UITextField!
    @IBOutlet weak var SignUpButton: UIButton!
    
    @IBAction func SignupButtonClicked(_ sender: Any) {
        
    }
    
    @IBAction func ChangeToLogButton(_ sender: Any) {
        UIView.animate(withDuration: 0.5, animations: {
            self.SignInView.transform = CGAffineTransform(translationX: 0, y: self.SignInView.bounds.height)
            self.SignInView.alpha = 0
        }) { _ in
            
            self.SignInView.isHidden = true
            self.LogInView.isHidden = false
            self.LogInView.transform = CGAffineTransform(translationX: 0, y: self.LogInView.bounds.height)
            UIView.animate(withDuration: 0.5){
                self.LogInView.transform = .identity
                self.LogInView.alpha = 1
            }
        }
    }
    
    
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        styleCloseButton()
        styleBackgroundImage()
        
        modifyTF()
        styleLogInStuff()
        
        SignInView.transform = CGAffineTransform(translationX: 0, y: self.SignInView.bounds.height)
        
    }
    
    private func styleLogInStuff(){
        LogInView.layer.cornerRadius = 25
        LogInView.clipsToBounds = true
        LogInButton.layer.cornerRadius = 25
        
        SignInView.layer.cornerRadius = 25
        SignInView.clipsToBounds = true
        SignUpButton.layer.cornerRadius = 25
    }
    
    func modifyTF(){
        styleTextField(EmailTF, imageName: "envelope", offset: 0)
        styleTextField(PasswordTf, imageName: "lock", offset: 65)
        
        styleTextField(RegEmailTF, imageName: "envelope", offset: -65)
        styleTextField(RegPasswordTF, imageName: "lock", offset: 0)
        styleTextField(RegCheckPassTF, imageName: "lock", offset: 65)
        
    }
    
    private func styleTextField(_ textField: UITextField, imageName: String, offset: CGFloat) {
        // Add image before text
        let imageView = UIImageView(image: UIImage(systemName: imageName)?.withConfiguration(UIImage.SymbolConfiguration(weight: .heavy)))
        imageView.tintColor = UIColor(named: "Gold")
        imageView.frame = CGRect(x: 0, y: 0, width: 36, height: 36)
        imageView.translatesAutoresizingMaskIntoConstraints = false
        let containerView = UIView()
        containerView.backgroundColor = UIColor(named: "NavBar")
        containerView.layer.cornerRadius = 11
        containerView.clipsToBounds = true
        
        containerView.addSubview(imageView)
        
        NSLayoutConstraint.activate([
                imageView.centerXAnchor.constraint(equalTo: containerView.centerXAnchor),
                imageView.centerYAnchor.constraint(equalTo: containerView.centerYAnchor),
                containerView.widthAnchor.constraint(equalToConstant: 42),
                containerView.heightAnchor.constraint(equalToConstant: 42)
            ])
        
        textField.leftView = containerView
        textField.leftViewMode = .always
        
        
        textField.layer.cornerRadius = 15
        textField.clipsToBounds = true
        
        // Center the text field
        textField.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            textField.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            textField.centerYAnchor.constraint(equalTo: view.centerYAnchor, constant: offset),
            textField.widthAnchor.constraint(equalToConstant: 306),
            textField.heightAnchor.constraint(equalToConstant: 50)
        ])
            
    }
    
    //background image styleing
    private func styleBackgroundImage() {
        // Disable autoresizing mask to use Auto Layout
        BackgroundImage.translatesAutoresizingMaskIntoConstraints = false
        
        // Add constraints to center the image and set size to 800x800 with offset
        NSLayoutConstraint.activate([
            // Width and height constraints for size
            BackgroundImage.widthAnchor.constraint(equalToConstant: 800),
            BackgroundImage.heightAnchor.constraint(equalToConstant: 800),
            
            // Center the image horizontally and vertically with offset
            BackgroundImage.centerXAnchor.constraint(equalTo: BackgroundImage.superview!.centerXAnchor, constant: 100), // Move 100 points to the right
            BackgroundImage.centerYAnchor.constraint(equalTo: BackgroundImage.superview!.centerYAnchor, constant: -50) // Move 50 points up
        ])
    }
    
    //colse button styleing
    private func styleCloseButton() {
        if let currentImage = ColseButton.imageView?.image {
            let boldImage = currentImage.withConfiguration(UIImage.SymbolConfiguration(weight: .bold))
            let resizedImage = boldImage.resized(to: CGSize(width: 40, height: 40))
            let templateImage = resizedImage.withRenderingMode(.alwaysTemplate)
            ColseButton.setImage(templateImage, for: .normal)
            ColseButton.tintColor = UIColor(named: "Gold")
        }
    }
}

extension UIImage {
    func resized(to newSize: CGSize) -> UIImage {
        let renderer = UIGraphicsImageRenderer(size: newSize)
        return renderer.image { _ in
            self.draw(in: CGRect(origin: .zero, size: newSize))
        }
    }
}
